// Code generated by counterfeiter. DO NOT EDIT.
package nomadfakes

import (
	"context"
	"sync"

	"github.com/hashicorp/nomad/api"
	"github.com/hcjulz/damon/nomad"
)

type FakeEventsClient struct {
	StreamStub        func(context.Context, map[api.Topic][]string, uint64, *api.QueryOptions) (<-chan *api.Events, error)
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		arg1 context.Context
		arg2 map[api.Topic][]string
		arg3 uint64
		arg4 *api.QueryOptions
	}
	streamReturns struct {
		result1 <-chan *api.Events
		result2 error
	}
	streamReturnsOnCall map[int]struct {
		result1 <-chan *api.Events
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventsClient) Stream(arg1 context.Context, arg2 map[api.Topic][]string, arg3 uint64, arg4 *api.QueryOptions) (<-chan *api.Events, error) {
	fake.streamMutex.Lock()
	ret, specificReturn := fake.streamReturnsOnCall[len(fake.streamArgsForCall)]
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		arg1 context.Context
		arg2 map[api.Topic][]string
		arg3 uint64
		arg4 *api.QueryOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.StreamStub
	fakeReturns := fake.streamReturns
	fake.recordInvocation("Stream", []interface{}{arg1, arg2, arg3, arg4})
	fake.streamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventsClient) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeEventsClient) StreamCalls(stub func(context.Context, map[api.Topic][]string, uint64, *api.QueryOptions) (<-chan *api.Events, error)) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = stub
}

func (fake *FakeEventsClient) StreamArgsForCall(i int) (context.Context, map[api.Topic][]string, uint64, *api.QueryOptions) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	argsForCall := fake.streamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEventsClient) StreamReturns(result1 <-chan *api.Events, result2 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 <-chan *api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventsClient) StreamReturnsOnCall(i int, result1 <-chan *api.Events, result2 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	if fake.streamReturnsOnCall == nil {
		fake.streamReturnsOnCall = make(map[int]struct {
			result1 <-chan *api.Events
			result2 error
		})
	}
	fake.streamReturnsOnCall[i] = struct {
		result1 <-chan *api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nomad.EventsClient = new(FakeEventsClient)
