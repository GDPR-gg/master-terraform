// Code generated by counterfeiter. DO NOT EDIT.
package nomadfakes

import (
	"sync"

	"github.com/hashicorp/nomad/api"
	"github.com/hcjulz/damon/nomad"
)

type FakeAllocFSClient struct {
	LogsStub        func(*api.Allocation, bool, string, string, string, int64, <-chan struct{}, *api.QueryOptions) (<-chan *api.StreamFrame, <-chan error)
	logsMutex       sync.RWMutex
	logsArgsForCall []struct {
		arg1 *api.Allocation
		arg2 bool
		arg3 string
		arg4 string
		arg5 string
		arg6 int64
		arg7 <-chan struct{}
		arg8 *api.QueryOptions
	}
	logsReturns struct {
		result1 <-chan *api.StreamFrame
		result2 <-chan error
	}
	logsReturnsOnCall map[int]struct {
		result1 <-chan *api.StreamFrame
		result2 <-chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAllocFSClient) Logs(arg1 *api.Allocation, arg2 bool, arg3 string, arg4 string, arg5 string, arg6 int64, arg7 <-chan struct{}, arg8 *api.QueryOptions) (<-chan *api.StreamFrame, <-chan error) {
	fake.logsMutex.Lock()
	ret, specificReturn := fake.logsReturnsOnCall[len(fake.logsArgsForCall)]
	fake.logsArgsForCall = append(fake.logsArgsForCall, struct {
		arg1 *api.Allocation
		arg2 bool
		arg3 string
		arg4 string
		arg5 string
		arg6 int64
		arg7 <-chan struct{}
		arg8 *api.QueryOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	stub := fake.LogsStub
	fakeReturns := fake.logsReturns
	fake.recordInvocation("Logs", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.logsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAllocFSClient) LogsCallCount() int {
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	return len(fake.logsArgsForCall)
}

func (fake *FakeAllocFSClient) LogsCalls(stub func(*api.Allocation, bool, string, string, string, int64, <-chan struct{}, *api.QueryOptions) (<-chan *api.StreamFrame, <-chan error)) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = stub
}

func (fake *FakeAllocFSClient) LogsArgsForCall(i int) (*api.Allocation, bool, string, string, string, int64, <-chan struct{}, *api.QueryOptions) {
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	argsForCall := fake.logsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeAllocFSClient) LogsReturns(result1 <-chan *api.StreamFrame, result2 <-chan error) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = nil
	fake.logsReturns = struct {
		result1 <-chan *api.StreamFrame
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeAllocFSClient) LogsReturnsOnCall(i int, result1 <-chan *api.StreamFrame, result2 <-chan error) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = nil
	if fake.logsReturnsOnCall == nil {
		fake.logsReturnsOnCall = make(map[int]struct {
			result1 <-chan *api.StreamFrame
			result2 <-chan error
		})
	}
	fake.logsReturnsOnCall[i] = struct {
		result1 <-chan *api.StreamFrame
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeAllocFSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAllocFSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nomad.AllocFSClient = new(FakeAllocFSClient)
