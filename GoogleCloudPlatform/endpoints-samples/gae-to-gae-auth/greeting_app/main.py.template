#!/usr/bin/env python
# Copyright 2018 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import argparse
import logging
import os

import endpoints
from protorpc import message_types
from protorpc import messages
from protorpc import remote


AUDIENCE = "YOUR_PROJECT_ID.appspot.com"

SHELL_SERVICE_ACCOUNT = "my-service-account@YOUR_PROJECT_ID.iam.gserviceaccount.com"
CLIENT_SERVICE_ACCOUNT = "CLIENT_PROJECT_ID@appspot.gserviceaccount.com"


def ServiceAccountIssuer(service_account):
    return endpoints.Issuer(
        issuer=service_account,
        jwks_uri="https://www.googleapis.com/robot/v1/metadata/x509/{}".format(
            service_account),
    )


class Greeting(messages.Message):
    """Greeting that stores a message."""
    message = messages.StringField(1)


@endpoints.api(
    name='greeting',
    version='v1',
    issuers={
        'shell_service_account': ServiceAccountIssuer(SHELL_SERVICE_ACCOUNT),
        'default_service_account': ServiceAccountIssuer(CLIENT_SERVICE_ACCOUNT),
    },
    audiences={
        'shell_service_account': [AUDIENCE],
        'default_service_account': [AUDIENCE],
    },
)
class GreetingApi(remote.Service):

    @endpoints.method(
        message_types.VoidMessage,
        Greeting,
        path='greet',
        http_method='POST',
        name='greet',
    )
    def greet(self, request):
        # user is a google.appengine.api.users.User
        # https://cloud.google.com/appengine/docs/standard/python/refdocs/modules/google/appengine/api/users#User
        # with the following fields:
        #  - email()
        #  - nickname()
        #  - user_id()
        #  - auth_domain()
        user = endpoints.get_current_user()
        if user is None:
            raise endpoints.UnauthorizedException("Missing or invalid token")

        return Greeting(message='Hello, {}'.format(user.email()))


api = endpoints.api_server([GreetingApi])
