#!/usr/bin/python
# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A python wrapper to start devappserver and a managed vm application.

Both the devappserver and the application will run in their respective
containers.
"""
# This file conforms to the external style guide
# pylint: disable=bad-indentation, g-bad-import-order

import logging
import os
import sys
import time
import warnings

from .. import constants
from .. import devappserver_init
from .. import pinger
from .. import utils
from ..sandbox import container_sandbox
from ..validator import contract
from ..validator import runtime_contract

import parsing


def main():
    """Run devappserver and the user's application in separate containers.

    The application must be started with the proper environment variables,
    port bindings, and volume bindings. The devappserver image runs a
    standalone api server.
    """
    logging.getLogger('appstart').setLevel(logging.INFO)

    # args should include all the args to the sandbox, as well as a
    # parser_type arg, which indicates which subparser was used.
    args = vars(parsing.make_appstart_parser().parse_args())

    # Find out what parser was used (and remove the entry from the args).
    parser_type = args.pop('parser_type')

    # In response to 'appstart init', create a new devappserver base image.
    if parser_type == 'init':
        utils.build_from_directory(os.path.dirname(devappserver_init.__file__),
                                   constants.DEVAPPSERVER_IMAGE,
                                   **args)
        utils.build_from_directory(os.path.dirname(pinger.__file__),
                                   constants.PINGER_IMAGE,
                                   **args)

    # In response to 'appstart run', create a container sandbox and run it.
    elif parser_type == 'run':
        try:
            with warnings.catch_warnings():
                # Suppress the InsecurePlatformWarning generated by urllib3
                # see: http://stackoverflow.com/questions/29134512/
                warnings.simplefilter('ignore')
                with container_sandbox.ContainerSandbox(**args):
                    while True:
                        # Sleeping like this is hacky, but it works. Note
                        # that signal.pause is not compatible with Windows...
                        time.sleep(10000)

        except KeyboardInterrupt:
            utils.get_logger().info('Exiting')
            sys.exit(0)
        except utils.AppstartAbort as err:
            if err.message:
                utils.get_logger().warning(str(err.message))
            sys.exit(1)

    # In response to 'appstart validate', attempt to perform validation.
    elif parser_type == 'validate':
        logfile = args.pop('log_file')
        threshold = args.pop('threshold')
        tags = args.pop('tags')
        verbose = args.pop('verbose')
        list_clauses = args.pop('list_clauses')
        success = False
        utils.get_logger().setLevel(logging.INFO)
        try:
            with warnings.catch_warnings():
                warnings.simplefilter('ignore')
                validator = contract.ContractValidator(runtime_contract, **args)
                if list_clauses:
                    validator.list_clauses()
                    sys.exit(0)
                success = validator.validate(tags, threshold, logfile, verbose)
        except KeyboardInterrupt:
            utils.get_logger().info('Exiting')
        except utils.AppstartAbort as err:
            if err.message:
                utils.get_logger().warning(err.message)
        if success:
            sys.exit(0)
        sys.exit('Validation failed')

    else:
        # This should not be reached
        sys.exit(1)

if __name__ == '__main__':
    main()
