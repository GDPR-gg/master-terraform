# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import glob

#get all the build variables we need
Import('env', 'project', 'buildroot')
localenv = env.Clone()

builddir = buildroot + '/' + project   #holds the build directory for this project
targetpath = builddir + '/' + project  #holds the path to the executable in the build directory

#specify the build directory
localenv.VariantDir(builddir, ".")

localenv.Append(CCFLAGS  = '-std=c++11 -D_GNU_SOURCE -ggdb')

conf = localenv.Configure(config_h = "config.h")
conf.Define("__STDC_FORMAT_MACROS")

if not conf.CheckCXX():
  print "A compiler with C++11 support is required."
  Exit(1)

conf.CheckLib("rt", "clock_gettime", language="C++")

if not conf.CheckLibWithHeader("event", "event2/event.h", "C++"):
  print "libevent required"
  Exit(1)

import SCons
if SCons.Conftest.CheckLib(SCons.SConf.CheckContext(conf), ["event_pthreads"], "evthread_use_pthreads", extra_libs=["event", "rt"], language="C++"):
  print "libevent_pthreads required"
  Exit(1)

if not conf.CheckLibWithHeader("pthread", "pthread.h", "C++"):
  print "pthread required"
  Exit(1)

if not conf.CheckCXXHeader("boost/lockfree/queue.hpp"):
  print "libboost with lockfree required"
  Exit(1)

# Use TCMalloc
if env['TCMALLOC']:
  # only need unwind on a static link
  tcmalloc_extralibs = []
  if env['STATICLINK']:
    tcmalloc_extralibs = ["unwind"]
  if SCons.Conftest.CheckLib(SCons.SConf.CheckContext(conf), ["tcmalloc"], extra_libs=tcmalloc_extralibs, language="C++"):
    print "tcmalloc required"
    Exit(1)

localenv = conf.Finish()

srclst = map(lambda x: builddir + '/' + x, glob.glob('src/*.cc'))
localenv.Library(targetpath, source=srclst)
