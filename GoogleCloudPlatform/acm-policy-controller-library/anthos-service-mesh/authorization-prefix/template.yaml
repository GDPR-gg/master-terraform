# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: disallowedauthzprefix
spec:
  crd:
    spec:
      names:
        kind: DisallowedAuthzPrefix
      validation:
        openAPIV3Schema:
          properties:
            disallowedprefixes:
              type: array
              items: 
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package asm.guardrails.disallowedauthzprefix

        violation[{"msg":msg}] {
          p := input.review.object

          p.apiVersion == "security.istio.io/v1beta1"
          p.kind == "AuthorizationPolicy"
            
          rule := p.spec.rules[_]
          from := rule.from[_]
          
          principal := from.source["principals"][_]
          parts := split(principal, "/")
          
          badprefix := input.parameters.disallowedprefixes[_]

          # check the final component of source.principals, the service account name
          startswith(parts[count(parts) - 1], badprefix)
          
          msg := sprintf("source.principals '%v' cannot begin with '%v'", [principal, badprefix])
        }

        violation[{"msg":msg}] {
          p := input.review.object
          
          p.apiVersion == "security.istio.io/v1beta1"
          p.kind == "AuthorizationPolicy"

          rule := p.spec.rules[_]
          from := rule.from[_]
          
          namespace := from.source["namespaces"][_]

          badprefix := input.parameters.disallowedprefixes[_]          
          startswith(namespace, badprefix)
          
          msg := sprintf("source.namespaces '%v' cannot begin with '%v'", [namespace, badprefix])
        }